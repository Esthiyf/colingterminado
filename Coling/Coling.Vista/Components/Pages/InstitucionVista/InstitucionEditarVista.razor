@page "/institucion/modificar/{rowkey}"
@inject IInstitucionService servicioInstitucion
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

<h3>Editar Institución</h3>

@if (institucion != null)
{
        <InstitucionFormularioVista @ref="insform" institucion="institucion" OnValidSubmit="Editar" Cancelar="Navegar"></InstitucionFormularioVista>
}
else
{
    <p>Cargando...</p>
}

@code {
    [Parameter]
    public string rowkey { get; set; }

    private Institucion institucion;
    private InstitucionFormularioVista? insform;
    string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoiTGF1cmEiLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxMjM3OTMxN30.iweCTVGmC81uzRS4VWnDjlZLI0v0BKUTQfi2f0JVdmc";
    protected override async Task OnInitializedAsync()
    {
        institucion = await servicioInstitucion.ObtenerInstitucionById(rowkey,token);
    }

    private async Task Editar()
    {
        
        var editado = await servicioInstitucion.EditarInstitucion(institucion, token);
        if (!editado)
        {
            await sweetAlertService.FireAsync("Error", "No se pudo guardar", SweetAlertIcon.Error);
            return;
        }
        Navegar();

    }
    private void Navegar()
    {
        insform!.formularioPostOk = true;
        nav.NavigateTo("/instituciones", forceLoad: true);
    }
}
